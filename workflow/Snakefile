import os
import glob
import re
import sys
import pandas as pd
import snakemake
import git
sys.path.insert(0, os.path.abspath(os.getcwd()) + '/scripts/hkp')
from RRBS_housekeeping import *

# Check correct snakemake version is being used.
try: snakemake.utils.min_version('6.5.3')
except snakemake.exceptions.WorkflowError as e:
    print(e, 'Workflow aborted.')
    sys.exit()

# Setup and validate config file
config_path = abspath('../config/config.yaml')
configfile: config_path
if not os.path.isfile(config_path):
    print('Configuration file ({}) not found. Workflow aborted.'.format(config_path))
    sys.exit()
snakemake.utils.validate(config, schema='schemas/config.schema.yaml')

# Setup report destination
report: 'report/workflow.rst'

# Load RRBS sample sheet and validate structure
rrbs_sample_sheet_path = abspath(config['RRBS_samples'])
schema_path = abspath('schemas/samples.schema.yaml')
rrbs_samples = importSampleSheet(sample_path=rrbs_sample_sheet_path, schema_path=schema_path)

# Load reference deconvolution bsseq sample sheet and validate structure
deconvo_ref_sheet_path = abspath(config['deconvo_bsseq_ref'])
deconvo_ref_samples = importSampleSheet(sample_path=deconvo_ref_sheet_path, schema_path=schema_path)

# Merge sample sheets for easy access to input files in the rules
merged_sample_sheet = mergeSampleSheet(sheetA=rrbs_samples, sheetB=deconvo_ref_samples)

# Install DMRFinder from github if not done already
DMRFinder_repo_path = abspath('../resources/DMRFinder')
if not os.path.isdir(DMRFinder_repo_path):
    git.Repo.clone_from(config['DMRfinder']['DMRFinder_git_URL'], DMRFinder_repo_path)
DMRFinder_repo = git.Repo(DMRFinder_repo_path)
# check that the repository loaded correctly
if DMRFinder_repo.bare:
    DMRF_error = 'Could not load repository at {}.'.format(DMRFinder_repo_path)
    DMRF_error = DMRF_error + ' Recommend checking DMRFinder git url in ../config/config.yaml. Workflow aborted.'
    print(DMRF_error)

# Set paths for reference files and working directory
workflow_dir = os.path.abspath(os.getcwd()) # absolute path to current working directory
resource_dir = os.path.abspath(os.getcwd() + "../resources")
reference_genome_path = abspath(config['ref']['path'])
reference_repeats = f"{resource_dir}/references/repeats/{config['ref']['hg_build']}.repeats.bed"
inverted_repeats = f"{resource_dir}/references/repeats/{config['ref']['hg_build']}.invert_repeats.bed"

# Which Cytosine contexts to Analyze
context_truth = {
    "CpG" : True, # Default is to always analyze CpG contexts
    "CHG" : config['cytosine_sites']['CHG'],
    "CHH" : config['cytosine_sites']['CHH']
}

# Globally constrain all wildcards matching {sample} to not have "/" in the string
#wildcard_constraints:
#  sample="[^/]"

# Load rules
include: 'rules/align.smk'
include: 'rules/index.smk'

# Target rule
rule all:
    input:
        get_initial_output(rrbs_samples, "rrbs_samples")[8:12]#,
#        get_initial_output(deconvo_ref_samples, "deconvo_ref_samples")[0:4]#,
#        get_final_output(rrbs_samples)
