import os
import glob
import re
import sys
import pandas as pd
import numpy as np
import snakemake
import git
sys.path.insert(0, os.path.abspath(os.getcwd()) + '/scripts/hkp')
from RRBS_housekeeping import *

# Check correct snakemake version is being used.
try: snakemake.utils.min_version('6.5.3')
except snakemake.exceptions.WorkflowError as e:
    print(e, 'Workflow aborted.')
    sys.exit()

# Setup and validate config file
config_path = abspath('../config/config.yaml')
configfile: config_path
if not os.path.isfile(config_path):
    print('Configuration file ({}) not found. Workflow aborted.'.format(config_path))
    sys.exit()
snakemake.utils.validate(config, schema='schemas/config.schema.yaml')

# Set paths for reference files and working directory
workflow_dir = os.path.abspath(os.getcwd()) # absolute path to current working directory
resource_dir = os.path.abspath(workflow_dir + "/resources")
results_dir = os.path.abspath(workflow_dir + "/results")
genotype_dir = resource_dir + "/references/genotypes"

reference_genome_path = abspath(config['ref']['path'])
reference_repeats = f"{resource_dir}/references/repeats/{config['ref']['hg_build']}.repeats.bed"
inverted_repeats = f"{resource_dir}/references/repeats/{config['ref']['hg_build']}.invert_repeats.bed"

# Load RRBS sample sheet and validate structure
rrbs_sample_sheet_path = abspath(config['RRBS_samples'])
schema_path = abspath('schemas/samples.schema.yaml')
rrbs_samples = importSampleSheet(sample_path=rrbs_sample_sheet_path, schema_path=schema_path)
rrbs_sample_names = rrbs_samples.index.tolist()

# Load reference deconvolution bsseq sample sheet and validate structure
deconvo_ref_sheet_path = abspath(config['deconvo_bsseq_ref'])
deconvo_ref_samples = importSampleSheet(sample_path=deconvo_ref_sheet_path, schema_path=schema_path)
deconvo_sample_names = deconvo_ref_samples.index.tolist()
set_options = {"rrbs_samples": rrbs_sample_names, "deconvo_ref_samples": deconvo_sample_names}
deconvolution_result = results_dir + "/deconvo_ref_samples/deconvolution/deconvo_values.txt"

# Merge sample sheets for easy access to input files in the rules
merged_sample_sheet = mergeSampleSheet(sheetA=rrbs_samples, sheetB=deconvo_ref_samples)

# LRS methylation samples, if activated
if config['lrs']['activate']:
    lrs_methyl_sample_path = abspath(config['lrs']['path'])
    schema_path = abspath('schemas/lrs-methyl.schema.yaml')
    lrs_methyl_sample_sheet = importLRSmethylSheet(sample_path=lrs_methyl_sample_path, schema_path=schema_path)
    lrs_sample_names = lrs_methyl_sample_sheet.index.tolist()
# Distinguish between lrs and rrbs sample names
def distinguish_lrs_rrbs(middle_folder, return_value):
    samples2use = lrs_sample_names if middle_folder == 'lrs_methyl' else rrbs_sample_names
    expansion = []
    for u in samples2use: expansion.append(f"{results_dir}/{middle_folder}/samples/" + u + ".agePrediction.txt")
    if return_value == "files":
        return expansion
    else:
        return samples2use

# Install DMRFinder from github if not done already
DMRFinder_repo_path = abspath('resources/DMRFinder')
if not os.path.isdir(DMRFinder_repo_path):
    git.Repo.clone_from(config['DMRfinder']['DMRFinder_git_URL'], DMRFinder_repo_path)
DMRFinder_repo = git.Repo(DMRFinder_repo_path)
# check that the repository loaded correctly
if DMRFinder_repo.bare:
    DMRF_error = 'Could not load repository at {}.'.format(DMRFinder_repo_path)
    DMRF_error = DMRF_error + ' Recommend checking DMRFinder git url in ../config/config.yaml. Workflow aborted.'
    print(DMRF_error)

# Which Cytosine contexts to Analyze
context_truth = {
    "CpG" : True, # Default is to always analyze CpG contexts
    "CHG" : config['cytosine_sites']['CHG'],
    "CHH" : config['cytosine_sites']['CHH']
}
context_to_use = [ key for key in list(context_truth.keys()) if context_truth[key] ]

# Clean set of chromosomes to run on
chromosomes = chromosome_constraint(reference_genome_path)

# Verify vcf file
vcf_file = f"{genotype_dir}/sample.original_genotypes.vcf.gz"
if config['remove_samples']['genotype_discordant']['activate']:
    vcf_source = config['remove_samples']['genotype_discordant']['vcf']
    if not os.path.isfile(vcf_source):
        print("VCF file ({}) could not be found. Please check path. Workflow aborted.".format(vcf_source))
genotypes = f"{genotype_dir}/all_samples.gt.vcf"

# Telomere methylation files
telo_pattern = results_dir + "/{analyte}/methylation_calls/samples/MethylDackel_{sample}.telomere_CHH.bedGraph.gz"
telo_rrbs_meth = expand(telo_pattern, analyte='rrbs_samples', sample=rrbs_sample_names)
telo_decon = expand(telo_pattern, analyte='deconvo_ref_samples', sample=deconvo_sample_names)
nabi_conversion = results_dir + '/rrbs_samples/check_conversion_rate/conversion_rate.txt'

# Globally constrain all wildcards matching {sample} to not have "/" in the string
all_sample_names = rrbs_sample_names + deconvo_sample_names + lrs_sample_names
repeats = [ 'with_repeats', 'without_repeats' ]
wildcard_constraints:
  sample = '|'.join([x for x in all_sample_names ]),
  chr = '|'.join(chromosomes),
  repeats = "with_repeats|without_repeats",
  meco = "methylation|coverage",
  context = 'CpG|CHG|CHH'

#----------------------------------------------------------------------------------------------------------------------#

# Subroutine to obtain the names of all final output files for a given sample sheet
def get_final_output():
    meco = [ 'methylation', 'coverage' ]
    context = context_to_use
    to_return = []
    ## build FTLD rrbs methylation files
    pattern = results_dir + "/{analyte}/methylation_calls/merged/merged_{meco}.{repeats}.noNAs.{context}.bedGraph.gz"
    to_return.append(expand(pattern, analyte="rrbs_samples", meco=meco, repeats=repeats, context=context))
    ## build deconvolution (WG-BSSEQ) methylation files
    to_return.append(expand(pattern, analyte="deconvo_ref_samples", meco=meco, repeats=repeats, context=context))
    ## get telomre methylation
    to_return.append(nabi_conversion)
#    if config['lrs']['activate']:
#        to_return.append(results_dir + "/lrs_methyl/merged/merged.agePrediction.txt")
    to_return.append(genotypes)
    to_return.append(deconvolution_result)
    to_return.append(results_dir + "/rrbs_samples/methylation_calls/samples/edgeR.tmp") # get methylKit regions
    # TBD: if vcf add back is activated, also include compression of input vcf as target
    return to_return

#----------------------------------------------------------------------------------------------------------------------#

# Load rules
include: 'rules/align.smk'
include: 'rules/index.smk'
include: 'rules/get_methylation.smk'
include: 'rules/agePrediction.smk'
include: 'rules/check_genotypes.smk'
include: 'rules/deconvolution.smk'
include: 'rules/edgeR.smk'

# Target rule
rule all:
    input:
        get_final_output()
